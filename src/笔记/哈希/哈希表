哈希表：为特定的数据与数值键建立一对一的链接：
                                        将我们数据的键通过 哈希函数 转换为 索引
        空间换时间
        设计非常重要：时间与空间消耗的平衡
        重点解决哈希冲突

        哈希函数的设计：
                      键 通过 哈希函数 得到的 索引 分布越均匀越好
                      特殊的领域由特殊的哈兮函数的设计

                      整形：
                            小范围正整数直接使用：
                                                ASCII码，学号，学生号等
                            小范围负整数进行偏移：
                                                转到正数范围内
                            大整数：
                                   身份证号码等
                                通常做法：（空间越大，冲突越少）
                                        取模： 比如：取后四位。 等同于 mod 10000
                                                    取后六位。 等同于 mod 1000000

                                               模一个素数最高效

                            浮点型：
                                   计算机中都是32 / 64 为的二进制表示的  --》   转成整形处理

                            字符串：
                                   转成整形处理：
                                                eg：166 = 1 * 10^2 + 6 * 10^1 + 6 * 10^0
                                                code = ......


                      参考网站：
                              http://planetmath.org/goodhashtableprimes



        处理哈希冲突：链地址法 Seperate Chaining
                    开放地址法






        动态空间处理与复杂度分析：
                               动态内存空间：数组大小随着N的大小动态变化：平均每个地址承载的元素超过一定的程度，及扩容；
                                                                                                               N / M = upperTol
                                                                                         少于             缩容：
                                                                                                                N / M < lowerTol

                               复杂度分析：




        Java中的哈希函数 hashcode()：

